{"version":3,"sources":["components/Form/Form.module.css","components/Form/Form.js","components/Result/Result.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","Input","From","props","react_default","a","createElement","className","style","onChange","inputChange","type","value","inputValue","placeholder","Result","_props$weather","weather","date","city","sunrise","sunset","temp","pressure","wind","error","weatherForecast","sunriseTime","Date","toLocaleTimeString","sunsetTime","class","concat","Fragment","App","APIkey","state","inputChangeValueHandler","e","target","_this","setState","prevProps","prevState","_this2","this","length","API","fetch","then","res","ok","Error","json","data","toLocaleString","sys","main","speed","catch","err","components_Result_Result","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.73869631.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"Form_Form__3opF0\",\"Input\":\"Form_Input__4oQ4m\"};","import React from 'react';\r\nimport style from './Form.module.css';\r\n\r\nconst From = props => {\r\n    return (\r\n        <form className={style.Form}>\r\n            <input className={style.Input} onChange={props.inputChange} type='text' value={props.inputValue} placeholder='Type in the city' />\r\n        </form>\r\n\r\n        // <form className={style.Form} onSubmit={props.citySubmit}>\r\n        //     <input className={style.Input} onChange={props.inputChange} type='text' value={props.inputValue} placeholder='Type in the city' />\r\n        //     <button className={style.Button}>Search your city</button>\r\n        // </form>\r\n    );\r\n}\r\n\r\nexport default From;","import React from 'react';\r\nimport './Result.module.css';\r\n\r\n\r\nconst Result = (props) => {\r\n    const { date, city, sunrise, sunset, temp, pressure, wind, error } = props.weather;\r\n\r\n    let weatherForecast = null;\r\n    if (!error && city) {\r\n\r\n        const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString();\r\n        const sunsetTime = new Date(sunset * 1000).toLocaleTimeString();\r\n\r\n        weatherForecast = (\r\n            <div>\r\n                <h2>Weather forecast for <span>{city}</span> on {date}</h2>\r\n                <h4><i className=\"far fa-sun\"></i> Sunrise at: {sunriseTime}</h4>\r\n                <h4><i class=\"fas fa-sun\"></i> Sunset at {sunsetTime}</h4>\r\n                <h4><i class=\"fas fa-temperature-low\"></i> Current temperature {temp} &#176;C</h4>\r\n                <h4><i class=\"fas fa-wind\"></i> Current pressure: {pressure} hPa</h4>\r\n                <h4><i class=\"fas fa-water\"></i> Wind: {wind} m/s</h4>\r\n            </div>\r\n        )\r\n    } else if (error) {\r\n        weatherForecast = <div>{`Sorry ${city} is not in our database`}</div>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {weatherForecast}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Result;","import React, { Component } from 'react';\nimport './App.css';\nimport Form from './components/Form/Form';\nimport Result from './components/Result/Result';\n\nclass App extends Component {\n\n  APIkey = '411d82b0e0c210380af9ccb07f19c0de';\n\n\n  state = {\n    inputValue: '',\n    date: '',\n    city: '',\n    sunrise: '',\n    sunset: '',\n    temp: '',\n    pressure: '',\n    wind: '',\n    error: false,\n  }\n\n  inputChangeValueHandler = e => {\n    const inputValue = e.target.value;\n    this.setState({ inputValue })\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n\n    if (this.state.inputValue.length < 3) return;\n\n    if (prevState.inputValue !== this.state.inputValue) {\n      const API = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.inputValue}&units=metric&APPID=${this.APIkey}`;\n\n      fetch(API)\n        .then(res => {\n          if (res.ok) return res;\n          throw Error('Uuuuuups, it happened again!');\n        })\n        .then(res => res.json())\n        .then(data => {\n          const date = new Date().toLocaleString();\n          this.setState(prevState => ({\n            date: date,\n            city: prevState.inputValue,\n            sunrise: data.sys.sunrise,\n            sunset: data.sys.sunset,\n            temp: data.main.temp,\n            pressure: data.main.pressure,\n            wind: data.wind.speed,\n            error: false\n          }));\n        })\n        .catch(err => {\n          this.setState(prevState => ({\n            error: true,\n            city: prevState.inputValue\n          }))\n        });\n    }\n  }\n\n\n  // citySubmitHandler = e => {\n  //   e.preventDefault();\n\n  //   const API = `http://api.openweathermap.org/data/2.5/weather?q=${this.state.inputValue}&APPID=${this.APIkey}&units=metric`;\n\n  //   fetch(API)\n  //     .then(res => {\n  //       if (res.ok) return res;\n  //       throw Error('O cholera');\n  //     })\n  //     .then(res => res.json())\n  //     .then(data => {\n  //       const date = new Date().toLocaleString();\n  //       this.setState(prevState => ({\n  //         date: date,\n  //         city: prevState.inputValue,\n  //         sunrise: data.sys.sunrise,\n  //         sunset: data.sys.sunset,\n  //         temp: data.main.temp,\n  //         pressure: data.main.pressure,\n  //         wind: data.wind.speed,\n  //         error: false\n  //       }));\n  //     })\n  //     .catch(err => {\n  //       this.setState(prevState => ({\n  //         error: true,\n  //         city: prevState.inputValue\n  //       }))\n  //     });\n  // }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form\n          inputChange={this.inputChangeValueHandler}\n          inputValue={this.state.inputValue}\n        />\n        {/* <Form\n          inputChange={this.inputChangeValueHandler}\n          inputValue={this.state.inputValue}\n          citySubmit={this.citySubmitHandler} /> */}\n        <Result weather={this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}